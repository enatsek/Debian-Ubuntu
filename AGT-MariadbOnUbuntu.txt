MariadbOnUbuntu: MariaDB Tutorial on Ubuntu 22.04


#---Copyright (C) 2020 - 2022 Exforge exforge@x386.xyz
# This document is free text: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
# This document is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

#---Specs
# Mariadb 2 Installation, configuration, simple user and DB management
#   on Ubuntu 22.04 (and 20.04) Server
# Based on the book Mastering Ubuntu Server 2nd Ed. by Jay LaCroix
#   This book hes introduced me to Ubuntu Server and I have to thank him for this
#   excellent book:
Link:https://www.packtpub.com/networking-and-servers/mastering-ubuntu-server-second-edition
# Almost (if not all) everything on this tutorial can be applied to Mysql.
# Mariadb is a fork or Mysql, and I prefer using it, besides a lot of other 
# reasons, I just don't like Or*cle
# !!! Do not ever install Mariadb and Mysql on the same server !!! 

#---0. Update Software Repositories
sudo apt update

#---1. Installation and Securing
# 1.1. Install MariaDB
sudo apt install mariadb-server
# 1.2. Check if installation is OK
systemctl status mariadb
#
# 1.3. Secure MariaDB
#   The following command makes some fine tunes regarding Mariadb security.
sudo mysql_secure_installation
#   You will be asked some questions.
#     "Enter current password for root (enter for none):"
#     There is no password yet, so press enter.
#   The next 2 questions are about securing root account. In Ubuntu root
#     account is already protected, so you can answer n.
#   For the next questions you can select default answers.
#
# 1.4. Enter Mariadb shell
# EXIT; to exit
sudo mariadb



#---2. Basic User Management
# !!! All commands must be run on Mariadb shell !!!
sudo mariadb
# 2.1. For administrating the db, it is best to create an admin user
#     on mariadb shell. admin can only login from localhost
#    Remember to change password to a good one.
CREATE USER 'admin'@'localhost' IDENTIFIED BY 'password';
FLUSH PRIVILEGES;
# 2.2. To let admin login from anywhere use:
CREATE USER 'admin'@'%' IDENTIFIED BY 'password';
FLUSH PRIVILEGES;
#
# 2.3. Give admin full access DB server. Can do anything but grant
GRANT ALL PRIVILEGES ON *.* TO 'admin'@'localhost';
#
# 2.4. Following command makes a full admin, with grant permissions
GRANT ALL PRIVILEGES ON *.* TO 'admin'@'localhost' WITH GRANT OPTION;
FLUSH PRIVILEGES;
#
# 2.5. Create a readonly user for DB
GRANT SELECT ON *.* TO 'readonlyuser'@'localhost' IDENTIFIED BY 'password';
#
# 2.6. List database users
SELECT HOST, USER, PASSWORD FROM mysql.user;
#
# 2.7. Grant a user readonly access for one database
GRANT SELECT ON mysampledb.* TO 'appuser'@'localhost' IDENTIFIED BY 'password';
#
# 2.8. Grant a user full access for a database
GRANT ALL ON mysampledb.* TO 'appuser'@'localhost' IDENTIFIED BY 'password';
#
# 2.9. Show the grants for a particular user:
SHOW GRANTS FOR 'appuser'@'localhost';
#
# 2.10. Remove a user
DELETE FROM mysql.user WHERE user='myuser' AND host='localhost';


#---3. Database Manipulation
# !!! All commands must be run on Mariadb shell !!!
# 3.1. Create a database
CREATE DATABASE mysampledb;
#
# 3.2. List databases
SHOW DATABASES;
#
# 3.3. Enter the workspace of  a database
USE mysampledb;
#
# 3.4. Create a table
CREATE TABLE Employees (Name char(15), Age int(3), Occupation char(15));
#
# 3.5. List columns of a table
SHOW COLUMNS IN Employees;
#
# 3.6. Insert a row into a table
INSERT INTO Employees VALUES ('Joe Smith', '26', 'Ninja');
#
# 3.7. List contents of a table
SELECT * FROM Employees;
#
# 3.8. Remove an entry from a database
DELETE FROM Employees WHERE Name = 'Joe Smith';
#
# 3.9. Drop a table
DROP TABLE Employees;
#
# 3.10. Drop an entire database:
DROP DATABASE mysampledb;


#---4. Backup and Restore
# 4.1. Backup a database
sudo mysqldump --databases mysampledb > mysampledb.sql
#
# 4.2. Restore it
sudo mariadb < mysampledb.sql


#---5. Master-Slave Replication Configuration
# 5.1. Specs and Preliminary Tasks
#   Master Server: 192.168.0.231  Ubuntu 22.04 Server
#   Slave Server:  192.168.0.232  Ubuntu 22.04 Server
#   Replication User: 'replicate'@'192.168.0.232'
#   Rep. User Password: Pass1234 
#   Database instance to replicate: mysampledb
#
#   Install mariadb on both servers, 
#   Apply steps in 1 on both servers
#   Apply step 3.1 to 3.7 on master server
#
#   !!! Please Remember: !!! 
#      Replication doesn't mean that you don't have to backup.
#      If you delete something accidentally, it is automatically deleted at slave too
#      So if you are running a production server, backup (at least) daily and weekly
#
# 5.2. Master Server Configuration
# 5.2.1. Configure master for bin log
sudo nano /etc/mysql/conf.d/mysql.cnf
# Change as below:
#__________________
[mysql]
[mysqld]
log-bin
binlog-do-db=mysampledb
server-id=1
#__________________
# 5.2.2. Change bind address to outside
sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf
# Change following line (Around line 28)
#_______________________
bind-address = 127.0.0.1
#_______________________
#  to
#_______________________
bind-address = 0.0.0.0
#_______________________
# 5.2.3. Create replication user
# Run following command on master mariadb shell
GRANT REPLICATION SLAVE ON *.* to 'replicate'@'192.168.0.232' identified by 'Pass1234';
#
# 5.2.4. Restart master mariadb server
sudo systemctl restart mariadb
#
# 5.2.5. Lock Master server for initial full replication
#   Run on Master server Mariadb shell
FLUSH TABLES WITH READ LOCK;
#
# 5.2.6. Backup the database at master server
sudo mysqldump --databases mysampledb > mysampledb.sql
# Move backup file to the slave server for restoring later
#
# 5.3. Slave Server Config
# 5.3.1. Restore database backed up at master
sudo mariadb < mysampledb.sql
#
# 5.3.2. Update slave server's conf file
sudo nano /etc/mysql/conf.d/mysql.cnf
#__________________
[mysql]
[mysqld]
server-id=2
#__________________
#  For more than 1 slaves, give different server-id numbers
#
# 5.3.3. Restart slave mariadb
sudo systemctl restart mariadb
#
# 5.3.4. Run the commands on slave mariadb shell
CHANGE MASTER TO MASTER_HOST="192.168.0.231", MASTER_USER='replicate', MASTER_PASSWORD='Pass1234';
# Check to see if slave running (on mariadb shell)
SHOW SLAVE STATUS;
# If Slave_IO_State is empty run (on mariadb shell)
START SLAVE;
#
# 5.4. Unlock Master Mariadb
#   Run on master mariadb shell
UNLOCK TABLES;
# 5.5. All set. You can try manipulating the DB on master, changes will be 
#   applied on slave in a few seconds.


